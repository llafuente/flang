import "lib/core/ffi-c";

template $test_array_tpl;

struct test_array($test_array_tpl) { // @heap
  i64 length,
  i64 capacity,
  ptr($test_array_tpl) values,

  alias len length, // internal alias
  alias cap capacity,
  alias data values,
};

function resize(test_array* arr, i64 newcap) : test_array* {
  var ptr($test_array_tpl) tmp = malloc(sizeof($test_array_tpl) * newcap);

  // copy, free the old one, and assign
  memcpy(
    unsafe_cast(ptr(void)) tmp,
    unsafe_cast(ptr(void)) arr.values,
    sizeof($test_array_tpl) * arr.length
  );

  free(unsafe_cast(ptr(void)) arr.values);
  arr.values = tmp;
  arr.capacity = newcap;

  return arr;
}

function operator new (test_array* arr) : void {
  arr.length = 0;
  arr.capacity = 8;
  arr.values = malloc(sizeof($test_array_tpl) * 8);
}

function operator delete (test_array* arr) {
  free(unsafe_cast(ptr(void)) arr.values);
}


implement test_array(i64) as test_array_i64;
var new test_array_i64* first_test_array;

resize(first_test_array, 50);


printf("length = %lu\n", first_test_array.length);
printf("capacity = %lu\n", first_test_array.capacity);

delete first_test_array;
