import "lib/core/ffi-c";

// typing
// * means pointer, cannot be moved, it's just s ref to one single
// [] array

template $array_tpl;

// arrays always live in the heap
// foreach wrapper declare it's type
// because $array_tpl is used, and give a unique name
struct array($array_tpl) { // @heap
  u64 length,
  u64 capacity,
  ptr($array_tpl) values,

  alias len length, // internal alias
  alias cap capacity,
  alias data values,
};

// implement array(u8) as string;
// also string should extend the type adding encoding

function property first(array arr) : $array_tpl {
  return arr.values[0];
}

function property last(array arr) : $array_tpl {
  return arr.values[arr.length - 1];
}

function property is_full(array arr) : bool {
  return arr.length == arr.capacity;
}

// virtual are transform to functions with force inline
// bool is_empty(array* arr) { return arr->length == 0; }
function property is_empty(array arr) : bool {
  return length == 0;
}

// Rules to expand macros
// Put the exact text in the arguments in order in the block
// foreach argument extract the return value
// example: var i64 i -> return i
// example: just_a_variable -> return just_a_variable
// error: each(func(), var t): first argument is a function call
// example: each(var i = func(), var t), useless but possible
// example: each(some_struct.i, var t)
// type check
// replace each argument with the return value
// replace #transclude with the block of code
// usage: arr.each(var i, var t) {}

//TODO macro each(array, u64 #index, $T #value) {
//TODO   for (var #index == 0; #index < length; ++i) {
//TODO     #value = values[i];
//TODO     #transclude
//TODO   }
//TODO }

// this function is not duplicated per type, because $array_tpl is not used
function operator delete (array* arr) {
  free(unsafe_cast(ptr(void)) arr.values);
}

// this function is duplicated because it's use $array_tpl
function operator new (array* arr) {
  // arr = malloc(sizeof(array), sizeof($array_tpl) * cap);
  // initialize size and capacity
  arr.length = 0;
  arr.capacity = 8;
  arr.values = malloc(sizeof($array_tpl) * 8);
}

// push arr[]= 1;
function push (array* arr, $array_tpl value) : array* {
  // $array_tpl is backed in all operators
  // function is not duplicated

  // TODO resize if needed?!

  if (!arr.data) {
    arr.length = 0;
    arr.capacity = 8;
    arr.values = malloc(sizeof($array_tpl) * 8);
  }

  arr.data[arr.len++] = value;

  return arr;
}

function set(array* arr, int index, $array_tpl value) : array* {
  // assert out-of-bounds

  arr.data[index] = value;

  return arr;
}

function operator []= (array* arr, u64 index) : $array_tpl* {
  // assert(index > arr.length, 'out of bounds: use push instead or fill before');

  return &arr.data[index];
}

function operator [] (array* arr, u64 index) {
  //#assert(index > arr.length, 'out of bounds');

  return cast($array_tpl) arr.data[index];
}

//TODO alias array_get operator [];
